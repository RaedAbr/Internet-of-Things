#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import time
import logging
import configpi

from louie import dispatcher
from datetime import datetime
from flask import jsonify
from collections import OrderedDict

from openzwave.network import ZWaveNetwork
from openzwave.option import ZWaveOption

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('openzwave')

started = False
name = configpi.name


###########################################################################################################################
###########################################################################################################################
##########    Root parent backend class     ###############################################################################
###########################################################################################################################
###########################################################################################################################


class Backend():

    def __init__(self):

        ###################  instanciation de l'objet backend ########################################################

        ###### options needed for python openzwave library like config files path, logging,
        device = configpi.interface
        options = ZWaveOption(device, config_path="/home/pi/IoTLab/python-openzwave/openzwave/config", user_path=".",
                              cmd_line="")
        options.set_log_file("OZW.log")
        options.set_append_log_file(False)
        options.set_console_output(False)
        options.set_save_log_level('Warning')
        options.set_logging(True)
        options.lock()

        # creation of the object network using the options entity already created
        self.network = ZWaveNetwork(options, autostart=False)

        ###### 	 These dispatchers associate a method to a signal. the signals are generated by the library python-openzwave.
        ######   Once the signal is received. It's associated method is executed (see "_node_added" example below in "_network_started" method)
        dispatcher.connect(self._network_started, ZWaveNetwork.SIGNAL_NETWORK_STARTED)
        dispatcher.connect(self._network_ready, ZWaveNetwork.SIGNAL_NETWORK_READY)

        ###### backend object attributes
        #        self.devices = OrderedDict()  ### will contain the list of nodes in the network
        #        self.sensors = OrderedDict()  ### will contain the list of sensors (only) in the network
        self.node_added = False
        self.node_removed = False
        self.timestamps = {}  ### will contain the time of the last values' update for each sensor
        self.queryStages = {  ### the diffrent stages that a node object gets through before being ready
            "None": 1,  # Query process hasn't started for this node
            "ProtocolInfo": 2,  # Retrieve protocol information
            "Probe": 3,  # Ping device to see if alive
            "WakeUp": 4,  # Start wake up process if a sleeping node
            "ManufacturerSpecific1": 5,  # Retrieve manufacturer name and product ids if ProtocolInfo lets us
            "NodeInfo": 6,  # Retrieve info about supported, controlled command classes
            "SecurityReport": 7,  # Retrieve a list of Command Classes that require Security
            "ManufacturerSpecific2": 8,  # Retrieve manufacturer name and product ids
            "Versions": 9,  # Retrieve version information
            "Instances": 10,  # Retrieve information about multiple command class instances
            "Static": 11,  # Retrieve static information (doesn't change)
            "Probe1": 12,  # Ping a device upon starting with configuration
            "Associations": 13,  # Retrieve information about associations
            "Neighbors": 14,  # Retrieve node neighbor list
            "Session": 15,  # Retrieve session information (changes infrequently)
            "Dynamic": 16,  # Retrieve dynamic information (changes frequently)
            "Configuration": 17,  # Retrieve configurable parameter information (only done on request)
            "Complete": 18  # Query process is completed for this node
        }

    #######################################################################################################################
    ############# LAUNCH  #################################################################################################
    #######################################################################################################################

    def _network_started(self, network):

        # executed once the software representation is started. the discovery of the network components has begun. they will be mapped into objects

        print("network started - %d nodes were found." % network.nodes_count)

        # these dispatchers associate a method to a signal. the signals are generated by the library python-openzwave.
        # a signal may contain a number of parameters that are passed to the method associated to the signal.
        # for exemple, the dispatcher below associates the signal "SIGNAL_NODE_ADDED" to the method "_node_added" that is implemented below (line 111).
        # the signal "SIGNAL_NODE_ADDED" transports two parameters which are the objects network and node.
        # once this signal is received, these two parameters will be passed to the method "_node_added" and the method will be executed.

        dispatcher.connect(self._node_added, ZWaveNetwork.SIGNAL_NODE_ADDED)
        dispatcher.connect(self._node_removed, ZWaveNetwork.SIGNAL_NODE_REMOVED)

    def _network_ready(self, network):

        # executed once the software representation is ready

        print("network : ready : %d nodes were found." % network.nodes_count)
        print("network : controller is : %s" % network.controller)
        dispatcher.connect(self._value_update, ZWaveNetwork.SIGNAL_VALUE)

    def _node_added(self, network, node):

        # executed when node is added to the software representation. it's executed after the method "_debug_node_new" (see below)

        print('node added: %s.' % node.node_id)
        self.timestamps["timestamp" + str(node.node_id)] = "None"
        self.node_added = True

    def _node_removed(self, network, node):

        # executed when node is removed from the software representation

        print('node removed: %s.' % node.name)
        self.node_removed = True

    def _value_update(self, network, node, value):

        # executed when a new value from a node is received

        print('Node %s: value update: %s is %s.' % (node.node_id, value.label, value.data))
        self.timestamps["timestamp" + str(node.node_id)] = int(time.time())

    ################################################################################################################
    ######################## START AND STOP THE SOFTWARE REPRESENTATION ############################################
    ################################################################################################################

    def start(self):

        # this method starts the software representation
        global started

        if started:
            print "Already started"
            return
        started = True
        self.network.start()
        print "Z-Wave Network Starting..."
        for i in range(0, 300):
            if self.network.state == self.network.STATE_READY:
                break
            else:
                time.sleep(1.0)
        if not self.network.is_ready:
            print "Network is not ready but continue anyway"
        print "------------------------------------------------------------"
        print "Nodes in network : %s" % self.network.nodes_count
        print "------------------------------------------------------------"

    def stop(self):

        # this method stops the software representation

        global started
        started = False
        print "Stopping Z-Wave Network... "
        self.network.stop()

    def reset(self):
        if self.network.nodes_count == 1:
            self.network.controller.hard_reset()
            return "Hard Reset Done"
        return "Cannot make Hard Reset while nodes included in network"

    #########################################################################################################################
    ############## YOUR WORK STARTS HERE ####################################################################################
    #########################################################################################################################
    #########################################################################################################################

    #######################################################################################################################
    ############# NETWORK #################################################################################################
    #######################################################################################################################

    def network_info(self):

        ret = {"Network Home ID": hex(self.network.home_id)}
        for node in self.network.nodes.itervalues():
            ret["node " + str(node.node_id)] = {
                "Is Ready": node.isReady,
                "Neighbours": list(node.neighbors),
                "Node ID": node.node_id,
                "Node location": node.location,
                "Node name": node.name,
                "Product name": node.product_name,
                "Query stage": node.getNodeQueryStage,
                "Query stage (%)": self.queryStages[node.getNodeQueryStage] * 100.0 / len(self.queryStages),
            }
        return jsonify(ret)

    # return "this method returns a JSON that lists all network nodes and gives some informations about each one of them like the ID, neighbors, ..."

    #######################################################################################################################
    ############# NODES #################################################################################################
    #######################################################################################################################

    def ordered_nodes_dict(self):

        # returns an ordered list of the network's nodes sorted by node's id

        return OrderedDict(sorted(self.network.nodes.items()))

    def addNode(self):

        #### COMPLETE THIS METHOD ##############

        return "this method passes the controller to inclusion mode and gets it out of it after 20 seconds "

    def removeNode(self):

        #### COMPLETE THIS METHOD ##############

        return "this method passes the controller to exclusion mode and gets it out of it after 20 seconds "

    def get_nodes_list(self):

        ret = {}
        for node in self.network.nodes.itervalues():
            ret["Node id : " + str(node.node_id)] = {
                "Node location": node.location,
                "Node name": node.name,
                "Node Type": node.type,
                "Product name": node.product_name,
                "Query stage": node.getNodeQueryStage,
                "Manufacturer Name": node.manufacturer_name,
                "Is Ready": node.isReady,
            }

        return jsonify(ret)

        # return "this method returns the list of nodes "

    def set_node_location(self, n, value):

        #### COMPLETE THIS METHOD ##############

        return " this method sets the location of a specific sensor node"

    def set_node_name(self, n, value):

        #### COMPLETE THIS METHOD ##############

        return "this method sets the name of a specific sensor node"

    def get_node_location(self, n):

        #### COMPLETE THIS METHOD ##############

        return "this method gets the location of a specific sensor node"

    def get_node_name(self, n):

        #### COMPLETE THIS METHOD ##############

        return "this method gets the name of a specific sensor node"

    def get_neighbours_list(self, n):

        #### COMPLETE THIS METHOD ##############

        return "this method gets the list of neighbours of a specific sensor node"

    def set_node_config_parameter(self, n, param, value, size):

        #### COMPLETE THIS METHOD ##############

        return "this method sets a configuration parameter to a given value"

    def get_node_config_parameter(self, n, param):

        #### COMPLETE THIS METHOD ##############

        return "this method gets the value of a configuration parameter"

    def get_nodes_Configuration(self):

        ret = {"Network Home ID": hex(self.network.home_id)}
        for node in self.network.nodes.itervalues():
            if node.isReady:
                values = node.get_values("All", "Config", "All", "All", "All")
                returned_list = {
                    "Enable Motion Sensor": "Enable Motion Sensor",
                    "Group 1 Interval": "Group 1 Interval",
                    "Group 1 Reports": "Group 1 Reports",
                    "Group 2 Interval": "Group 2 Interval",
                    "Group 2 Reports": "Group 2 Reports",
                    "Group 3 Interval": "Group 3 Interval",
                    "Group 3 Reports": "Group 3 Reports",
                    "On time": "Wake-up Interval",
                }
                ret_list = {"Node Id": str(node.node_id)}
                for val in values.itervalues():
                    if val.label in returned_list:
                        ret_list[returned_list[val.label]] = val.data
                ret["Node " + str(node.node_id)] = ret_list

        return jsonify(ret)


#######################################################################################################################
############# Multisensors #################################################################################################
#######################################################################################################################        

class Backend_with_sensors(Backend):

    def get_sensors_list(self):

        ret = {}
        for node in self.network.nodes.itervalues():
            if node.product_name == "MultiSensor 6":
                ret["Node id : " + str(node.node_id)] = {
                    "Node location": node.location,
                    "Node name": node.name,
                    "Node Type": node.type,
                    "Product name": node.product_name,
                    "Query stage": node.getNodeQueryStage,
                    "Manufacturer Name": node.manufacturer_name,
                    "Is Ready": node.isReady,
                }

        return jsonify(ret)

    def get_temperature(self, n):

        #### HERE'S AN EXAMPLE OF A METHOD THAT GETS THE TEMPERATURE OF A SPECIFIC SENSOR NODE ##############

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady and n != 1 and "timestamp" + str(node.node_id) in self.timestamps:
                values = node.get_values(0x31, "User", "All", True, False)
                for value in values.itervalues():
                    if value.label == "Temperature":
                        val = round(value.data, 1)
                        #        if len(node.location) < 3:
                        #            node.location = configpi.sensors[str(node.node_id)][:4]
                        return jsonify(controller=name, sensor=node.node_id, location=node.location,
                                       type=value.label.lower(),
                                       updateTime=self.timestamps["timestamp" + str(node.node_id)], value=val)
        return "Node not ready or wrong sensor node !"

    def get_humidity(self, n):

        #### HERE'S AN EXAMPLE OF A METHOD THAT GETS THE HUMIDITY OF A SPECIFIC SENSOR NODE ##############

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady and n != 1 and "timestamp" + str(node.node_id) in self.timestamps:
                values = node.get_values(0x31, "User", "All", True, False)
                for value in values.itervalues():
                    if value.label == "Relative Humidity":
                        val = int(value.data)
                        #       if len(node.location) < 3:
                        #           node.location = configpi.sensors[str(node.node_id)][:4]
                        return jsonify(controller=name, sensor=node.node_id, location=node.location,
                                       type=value.label.lower(),
                                       updateTime=self.timestamps["timestamp" + str(node.node_id)], value=val)
        return "Node not ready or wrong sensor node !"

    def get_luminance(self, n):

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady and n != 1 and "timestamp" + str(node.node_id) in self.timestamps:
                values = node.get_values(0x31, "User", "All", True, False)
                for value in values.itervalues():
                    if value.label == "Luminance":
                        val = int(value.data)
                        return jsonify(controller=name, sensor=node.node_id, location=node.location,
                                       type=value.label.lower(),
                                       updateTime=self.timestamps["timestamp" + str(node.node_id)], value=val)
        return "Node not ready or wrong sensor node !"

    def get_motion(self, n):

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady and n != 1 and "timestamp" + str(node.node_id) in self.timestamps:
                values = node.get_values(0x30, "User", "All", True, False)
                for value in values.itervalues():
                    val = value.data
                    return jsonify(controller=name, sensor=node.node_id, location=node.location,
                                   type=value.label.lower(),
                                   updateTime=self.timestamps["timestamp" + str(node.node_id)], value=val)
        return "Node not ready or wrong sensor node !"

    def get_battery(self, n):

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady:
                value = node.get_battery_level()
                return jsonify(controller=name, sensor=node.node_id, location=node.location,
                               type="Battery",
                               updateTime=self.timestamps["timestamp" + str(node.node_id)], value=value)
        return "Node not ready or wrong sensor node !"

    def get_all_Measures(self, n):

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady:
                values = node.get_values("All", "User", "All", True, False)
                ret = {
                    "controller": name,
                    "sensor": node.node_id,
                    "location": node.location,
                    "updateTime": self.timestamps["timestamp" + str(node.node_id)],
                }
                measures_list = {
                    "Battery Level": "battery",
                    "Sensor": "motion",
                    "Relative Humidity": "humidity",
                    "Luminance": "luminance",
                    "Temperature": "temperature",
                }
                for value in values.itervalues():
                    if value.label in measures_list:
                        ret[measures_list[value.label]] = value.data
                return jsonify(ret)
        return "Node not ready or wrong sensor node !"

    def set_basic_sensor_nodes_configuration(self, Grp_interval, Grp_reports, Wakeup_interval):

        for node in self.network.nodes.itervalues():
            if node.product_name == "MultiSensor 6" and node.isReady:
                node.set_config_param(0x6F, Grp_interval, 4)
                node.set_config_param(0x65, Grp_reports, 4)
                node.set_config_param(0x03, Wakeup_interval, 2)

        return jsonify(Group_Interval=Grp_interval, Group_Reports=Grp_reports, Wakeup_interval=Wakeup_interval)

###########################################################################################################################
###########################################################################################################################
##################    Dimmers class     ##################################################################################
###########################################################################################################################
###########################################################################################################################

class Backend_with_dimmers(Backend):

    def __init__(self):
        Backend.__init__(self)

    def get_dimmers(self):

        ret = {}
        for node in self.network.nodes.itervalues():
            if node.product_name == "ZE27":
                ret["Node id : " + str(node.node_id)] = {
                    "Node location": node.location,
                    "Node name": node.name,
                    "Node Type": node.type,
                    "Product name": node.product_name,
                    "Query stage": node.getNodeQueryStage,
                    "Manufacturer Name": node.manufacturer_name,
                    "Is Ready": node.isReady,
                }

        return jsonify(ret)

    def get_dimmer_level(self, n):

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady:
                for value in node.values.itervalues():
                    if value.label == "Level":
                        val = value.data
                        return jsonify(controller=name, sensor=node.node_id, location=node.location,
                                       type=value.label.lower(),
                                       updateTime=self.timestamps["timestamp" + str(node.node_id)], value=val)
        return "Node not ready or wrong sensor node !"

    def set_dimmer_level(self, n, level):

        for node in self.network.nodes.itervalues():
            if node.node_id == n and node.isReady:
                for value in node.values.itervalues():
                    if value.label == "Level":
                        value.data = level

###########################################################################################################################
###########################################################################################################################
##########    Dimmers and multisensors class         ######################################## #############################
###########################################################################################################################
###########################################################################################################################

class Backend_with_dimmers_and_sensors(Backend_with_dimmers,
                                       Backend_with_sensors):  # Cette classe sera utilise dans "flask-main"

    pass
